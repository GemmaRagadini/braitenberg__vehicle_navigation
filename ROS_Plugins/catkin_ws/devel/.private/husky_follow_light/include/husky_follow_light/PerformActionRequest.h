// Generated by gencpp from file husky_follow_light/PerformActionRequest.msg
// DO NOT EDIT!


#ifndef HUSKY_FOLLOW_LIGHT_MESSAGE_PERFORMACTIONREQUEST_H
#define HUSKY_FOLLOW_LIGHT_MESSAGE_PERFORMACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace husky_follow_light
{
template <class ContainerAllocator>
struct PerformActionRequest_
{
  typedef PerformActionRequest_<ContainerAllocator> Type;

  PerformActionRequest_()
    : action()  {
    }
  PerformActionRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PerformActionRequest_

typedef ::husky_follow_light::PerformActionRequest_<std::allocator<void> > PerformActionRequest;

typedef boost::shared_ptr< ::husky_follow_light::PerformActionRequest > PerformActionRequestPtr;
typedef boost::shared_ptr< ::husky_follow_light::PerformActionRequest const> PerformActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::husky_follow_light::PerformActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::husky_follow_light::PerformActionRequest_<ContainerAllocator1> & lhs, const ::husky_follow_light::PerformActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::husky_follow_light::PerformActionRequest_<ContainerAllocator1> & lhs, const ::husky_follow_light::PerformActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace husky_follow_light

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7757aad79fa343e61bc69ed7f1b7666d";
  }

  static const char* value(const ::husky_follow_light::PerformActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7757aad79fa343e6ULL;
  static const uint64_t static_value2 = 0x1bc69ed7f1b7666dULL;
};

template<class ContainerAllocator>
struct DataType< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "husky_follow_light/PerformActionRequest";
  }

  static const char* value(const ::husky_follow_light::PerformActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
;
  }

  static const char* value(const ::husky_follow_light::PerformActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerformActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::husky_follow_light::PerformActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::husky_follow_light::PerformActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKY_FOLLOW_LIGHT_MESSAGE_PERFORMACTIONREQUEST_H
